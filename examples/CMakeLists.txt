
add_executable(ising ising.cpp)
add_executable(ising_standalone ising_standalone.cpp)
add_executable(ising_random_field ising_random_field.cpp)
add_executable(ising_no_field ising_no_field.cpp)
add_executable(xy On.cpp)
add_executable(xy_hierarchical On_hierarchical.cpp)
add_executable(potts_3 potts.cpp)
add_executable(clock_5 clock.cpp)
add_executable(discrete_gaussian discrete_gaussian.cpp)
add_executable(continuous_gaussian continuous_gaussian.cpp)
add_executable(ising_animation ising_animation.cpp)
add_executable(ising_boundary ising_boundary.cpp)
add_executable(coulomb_gas coulomb_gas.cpp)

target_compile_definitions(xy PUBLIC WOLFF_N=2)
target_compile_definitions(potts_3 PUBLIC WOLFF_POTTSQ=3)
target_compile_definitions(clock_5 PUBLIC WOLFF_POTTSQ=5)
target_compile_definitions(xy_hierarchical PUBLIC WOLFF_N=2 WOLFF_D=2 WOLFF_BOND_DEPENDENCE)

target_link_libraries(ising wolff)
target_link_libraries(ising_standalone wolff)
target_link_libraries(ising_random_field wolff)
target_link_libraries(ising_no_field wolff)
target_link_libraries(xy wolff)
target_link_libraries(xy_hierarchical wolff)
target_link_libraries(potts_3 wolff)
target_link_libraries(clock_5 wolff)

find_package(glfw3 3.3 REQUIRED)
include_directories(${PROJECT_SOURCE_DIR}/vendor/glad/include)
target_link_libraries(ising_animation wolff glfw glad)
target_link_libraries(ising_boundary wolff glfw glad)
target_link_libraries(coulomb_gas wolff glfw glad)
target_link_libraries(discrete_gaussian wolff glfw glad)
target_link_libraries(continuous_gaussian wolff glfw glad)
